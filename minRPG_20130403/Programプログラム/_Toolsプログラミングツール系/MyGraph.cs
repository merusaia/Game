using System;

namespace PublicDomain
{
    /// <summary>
    /// MyGraphクラスで予め定義された、様々なグラフを指定するenum列挙体です。
    /// </summary>
    public enum EGraph・グラフの種類
    {
        freehandA_成長曲線まったりいこうぜ＿直線波揺れ型,
        freehandB_成長曲線ジグザグいこうぜ＿階段型,
        freehandC_成長曲線早いとこいこうぜ＿円弧型,
        freehandD_成長曲線遅咲きでいこうぜ＿指数関数増加型,
    }

    /// <summary>
    /// double[]型配列をＬＶＵＰ必要経験値やパラメータの成長曲線など、様々なグラフの値を持っているクラスです。
    /// </summary>
    public class MyGraph
    {
        public static int s_graphXMin = 0;
        public static int s_graphXMax = 1000;
        public static double s_graphYMin = 0;
        public static double s_graphYMax = 1000;
        // (x,y)=(0～1000, 0～1000]。x=0,1,2,...,1000の時にいろんな規則で増加するyの値を格納した1001個の配列、loadEGraphs()で初めてメモリに格納される
        public static double[] s_freehandA;
        public static double[] s_freehandB;
        public static double[] s_freehandC;
        public static double[] s_freehandD;

        /// <summary>
        /// このクラスの使い方のサンプルコードを示したメソッドです。
        /// </summary>
        public static void _Help・このクラスの使い方()
        {
            // 自分で作ったグラフの値をすぐ出したい時に
            double[] _myGraph = new double[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
            int _x = 5;
            double _y = MyGraph.getY(_myGraph, _x);
            Console.WriteLine("グラフ： x=" + _x + "の時のyの値は、" + _y + "です。");

            // 予め定義されたグラフの値をすぐ出したい時に
            double[] _graph1_x1To1000_y0To1000 = getYs(EGraph・グラフの種類.freehandA_成長曲線まったりいこうぜ＿直線波揺れ型);
            double[] _graph2_x1To1000_y0To1000 = getYs(EGraph・グラフの種類.freehandB_成長曲線ジグザグいこうぜ＿階段型);
            double[] _graph3_x0To100_y0To100 = getYs(EGraph・グラフの種類.freehandC_成長曲線早いとこいこうぜ＿円弧型, 0, 100, 0, 100);
            double[] _graph4_x0To100_y0To100 = getYs(EGraph・グラフの種類.freehandD_成長曲線遅咲きでいこうぜ＿指数関数増加型, 0, 100, 0, 100);
            double _y_x30_in_graph1 = getY(_graph1_x1To1000_y0To1000, 30);
            _x = 5;
            _y = MyGraph.getY(_graph1_x1To1000_y0To1000, _x);
            Console.WriteLine("グラフ： x=" + _x + "の時のyの値は、" + _y + "です。");
            _x = 5;
            _y = MyGraph.getY(_graph2_x1To1000_y0To1000, _x);
            Console.WriteLine("グラフ： x=" + _x + "の時のyの値は、" + _y + "です。");

            #region 以下、草案
            // 以下のテストコードは、FDrawForm._HELPにうつったよ
            // フォームにグラフに表示する（フォーム外でコントロール触れないからか、外部からはできなかった）
            //PublicDomain.FDrawForm _testForm = new PublicDomain.FDrawForm();            
            //// [Q]Formの中で描画メソッドを実行したらできるのに、Formの外でこのメソッドをpublicにして呼び出してもできない。たぶんフォームのスレッドセーフ（コントロールをフォームのスレッド以外では変更できない）の問題か。
            //_testForm.showGraph・引数のグラフをお絵かきモードで描画(_graph1_x1To1000_y0To1000, System.Drawing.Color.Green);
            //// フォームを非同期に呼び出して、フォームが終了するまで待つ
            //MyTools.wait_ForClosingForm(_testForm);
            //int a = 0; // ここをブレークポイントしておけば、フォームが閉じられたときにメソッド内の変数の中身を確認できるよ
            #endregion
        }



        /// <summary>
        /// ※内部では_Ys[_x]を返しているだけです。ただ、_Ysのnull確認や_xの範囲の例外処理をしているので、コードのシンプル化や間違えないように使うメソッドとして便利です。できるだけこれを使ってください。
        /// 
        /// (x,y)=(0～長さ-1, _Ys[0]～_Ys[長さ-1])。指定したdouble[]型のグラフ_Ysに従って、x=_xの時にいろんな規則で増加するyの値を返します。_xの値が不正な場合はdouble.NaNを返します。
        /// </summary>
        public static double getY(double[] _Ys, int _x)
        {
            double _y = 0;
            double[] _ys = _Ys;
            // xが配列外の場合は、double.NaNを返す
            if (_ys == null || _x < 0 || _x > _ys.Length - 1) _y = double.NaN;
            _y = _ys[_x];
            return _y;
        }
        /// <summary>
        /// (x,y)=(_xMin（ただし0以上の整数）～_xMax, _yMin～_yMax)。指定したdouble[]型のグラフ_Ysに従って、x=_xの時にいろんな規則で増加するyの値を返します。_xの値が不正な場合はdouble.NaNを返します。
        /// </summary>
        public static double getY(double[] _Ys, int _x, int _xMin, int _xMax, double _yMin, double _yMax)
        {
            double _y = 0;

            // 元のグラフのxの配列インデックスをスケール変換してyを取得し、そのyの値をスケール変換
            // 配列数を計算
            int _returnGraphLength = (_xMax - 0) + 1; // _graph[x]で代入できるように、例えばmin5～100でも配列は0～100の(100-0)+1=101個作ります。
            int _baseGraphLength = _Ys.Length;
            // 元のグラフ
            double[] _baseGraph = _Ys;
            int i = _x; // iはreturnGraphのx
            // 元のグラフにスケール変換したxとy
            int _basedX;
            double _basedY;
            // 配列数変換
            _basedX = (int)((double)i * ((double)(_baseGraphLength-1) / (double)(_returnGraphLength-1))); // 切り捨てしてるしbaseの配列数を超えないはず
            // スケール変換
            _basedY = (_baseGraph[_basedX] - s_graphYMin) * ((_yMax - _yMin) / (s_graphYMax - s_graphYMin)) + _yMin;

            return _y;
        }

        #region 予め格納された成長曲線グラフ（double[]型）を使用するコード
        /// <summary>
        /// 予め格納された成長曲線グラフの初期化（ここで初めてメモリを食う）
        /// </summary>
        public static void loadEGraphs()
        {
            if (s_freehandA == null)
            {
                s_freehandA = new double[] {0,    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 30, 31, 35, 36, 37, 42, 42, 42, 43, 46, 46, 47, 46, 48, 49, 50, 50, 50, 50, 54, 54, 54, 54, 54, 54, 54, 54, 56, 57, 58, 60, 60, 60, 65, 65, 65, 66, 69, 69, 70, 71, 71, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 73, 75, 76, 77, 77, 77, 77, 78, 80, 81, 82, 83, 84, 84, 83, 85, 88, 90, 91, 92, 94, 94, 94, 95, 92, 94, 96, 98, 100, 102, 104, 106, 107, 110, 110, 111, 110, 112, 114, 117, 119, 121, 123, 124, 125, 125, 128, 132, 133, 136, 135, 142, 144, 146, 150, 152, 154, 160, 161, 162, 164, 167, 169, 171, 173, 175, 177, 179, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 182, 183, 183, 184, 183, 184, 185, 185, 185, 185, 185, 185, 185, 185, 186, 187, 187, 187, 187, 188, 190, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 194, 195, 196, 196, 197, 198, 198, 199, 198, 200, 201, 202, 202, 202, 202, 202, 202, 206, 206, 206, 206, 204, 206, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 209, 210, 210, 211, 212, 212, 212, 212, 215, 215, 215, 216, 217, 217, 218, 219, 220, 221, 221, 221, 221, 221, 223, 224, 225, 225, 225, 225, 225, 225, 226, 227, 229, 231, 231, 231, 232, 231, 235, 235, 235, 237, 239, 240, 242, 242, 242, 246, 246, 246, 248, 250, 252, 253, 254, 254, 256, 258, 260, 261, 262, 263, 264, 265, 267, 267, 271, 271, 271, 271, 271, 271, 275, 276, 277, 280, 281, 285, 286, 287, 287, 291, 294, 298, 301, 304, 306, 310, 310, 313, 315, 316, 315, 319, 323, 324, 325, 329, 332, 335, 337, 337, 340, 342, 344, 345, 348, 348, 348, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 365, 366, 367, 367, 368, 369, 365, 369, 373, 373, 373, 373, 373, 373, 374, 375, 375, 376, 377, 377, 377, 377, 378, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 379, 380, 379, 381, 381, 381, 381, 382, 383, 383, 383, 383, 383, 383, 383, 384, 385, 385, 385, 385, 385, 385, 385, 383, 385, 387, 387, 387, 387, 387, 387, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 393, 394, 394, 394, 394, 394, 395, 396, 398, 398, 398, 394, 398, 402, 402, 402, 403, 403, 403, 404, 405, 405, 406, 407, 408, 409, 412, 412, 412, 412, 412, 412, 412, 412, 413, 409, 410, 412, 413, 417, 417, 417, 419, 421, 421, 421, 421, 421, 421, 421, 422, 423, 423, 423, 423, 423, 423, 423, 423, 424, 424, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 425, 426, 427, 428, 429, 431, 431, 431, 431, 432, 433, 433, 434, 433, 434, 435, 437, 437, 437, 440, 441, 444, 444, 444, 445, 442, 444, 446, 448, 450, 452, 456, 456, 457, 456, 458, 460, 464, 467, 469, 469, 473, 475, 477, 481, 482, 483, 490, 491, 494, 494, 497, 498, 503, 506, 512, 515, 517, 523, 528, 533, 542, 548, 554, 560, 558, 571, 575, 579, 585, 586, 587, 594, 595, 596, 597, 595, 598, 601, 604, 606, 608, 612, 612, 615, 617, 618, 621, 621, 624, 628, 629, 630, 629, 631, 633, 635, 637, 642, 646, 646, 649, 652, 653, 652, 656, 656, 656, 657, 660, 660, 660, 661, 662, 664, 667, 667, 668, 669, 672, 672, 673, 674, 674, 675, 676, 676, 677, 678, 678, 679, 680, 681, 681, 681, 681, 681, 682, 681, 682, 683, 683, 684, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 686, 687, 688, 690, 690, 690, 691, 688, 690, 692, 694, 694, 694, 696, 696, 696, 694, 696, 698, 698, 698, 698, 699, 700, 700, 701, 702, 702, 702, 702, 703, 704, 706, 706, 706, 706, 707, 710, 710, 711, 710, 713, 715, 715, 715, 715, 716, 716, 717, 718, 717, 719, 721, 722, 722, 723, 723, 724, 726, 727, 728, 728, 729, 730, 732, 733, 734, 734, 735, 736, 737, 738, 740, 742, 742, 743, 744, 745, 744, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 760, 761, 762, 762, 764, 765, 765, 766, 769, 769, 770, 771, 769, 771, 773, 775, 777, 777, 773, 777, 781, 783, 784, 787, 787, 787, 790, 792, 794, 795, 796, 798, 801, 804, 808, 810, 812, 813, 815, 815, 816, 817, 817, 819, 821, 823, 826, 827, 828, 829, 831, 830, 831, 833, 835, 832, 835, 838, 842, 844, 844, 844, 847, 850, 854, 855, 856, 856, 860, 862, 867, 868, 869, 871, 873, 875, 881, 887, 889, 890, 894, 898, 900, 902, 906, 908, 910, 912, 915, 917, 920, 923, 925, 928, 931, 933, 937, 940, 943, 942, 950, 954, 958, 967, 972, 977, 992, 996, 997, 999, 1000 };
                s_freehandB = new double[] {0,    15, 16, 16, 16, 20, 23, 23, 23, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 35, 36, 35, 37, 37, 37, 37, 37, 37, 37, 58, 79, 56, 68, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 93, 98, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 124, 125, 125, 125, 125, 125, 125, 125, 126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 143, 127, 175, 171, 167, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 176, 176, 177, 177, 177, 177, 177, 177, 177, 176, 177, 177, 178, 178, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 204, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 228, 229, 227, 254, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 280, 280, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 280, 279, 278, 277, 277, 277, 277, 277, 276, 275, 287, 325, 312, 319, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 327, 322, 323, 323, 324, 324, 325, 326, 326, 327, 326, 327, 331, 331, 331, 331, 331, 331, 331, 331, 331, 332, 330, 330, 331, 331, 331, 332, 332, 333, 333, 334, 334, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 336, 335, 337, 366, 394, 394, 372, 350, 365, 344, 394, 394, 394, 394, 394, 394, 394, 393, 393, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 391, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 449, 449, 449, 448, 448, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 445, 444, 444, 474, 444, 533, 524, 515, 492, 469, 533, 508, 465, 458, 455, 452, 448, 492, 535, 535, 535, 536, 536, 537, 537, 537, 537, 537, 538, 538, 539, 539, 540, 540, 540, 541, 541, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 579, 615, 615, 586, 556, 576, 615, 615, 615, 615, 615, 615, 615, 615, 614, 614, 614, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 620, 612, 637, 653, 669, 679, 689, 708, 708, 720, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 756, 699, 756, 794, 871, 871, 871, 871, 781, 775, 769, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 871, 914, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 956, 960, 960, 960, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 962, 965, 965, 965, 966, 965, 967, 968, 969, 971, 971, 971, 973, 974, 975, 975, 977, 979, 980, 979, 981, 982, 983, 983, 983, 983, 983, 987, 990, 991, 990, 992, 992, 992, 994, 994, 994, 996, 997, 998, 998, 1000 };
                s_freehandC = new double[] {0,    15, 16, 17, 17, 19, 21, 21, 22, 23, 23, 23, 23, 23, 22, 23, 24, 25, 25, 26, 27, 27, 27, 27, 31, 32, 33, 34, 35, 37, 38, 42, 46, 48, 52, 52, 53, 54, 56, 56, 60, 63, 65, 67, 69, 71, 73, 74, 75, 79, 79, 79, 82, 85, 86, 84, 87, 90, 90, 91, 92, 94, 94, 93, 94, 95, 96, 97, 98, 99, 100, 99, 101, 102, 103, 105, 106, 107, 108, 112, 111, 112, 113, 114, 114, 115, 116, 117, 118, 119, 119, 122, 125, 127, 130, 133, 135, 138, 140, 146, 148, 149, 148, 152, 156, 157, 158, 165, 165, 165, 169, 171, 173, 176, 177, 181, 182, 183, 192, 194, 196, 198, 201, 204, 210, 213, 216, 215, 221, 227, 230, 233, 242, 242, 242, 252, 254, 256, 253, 260, 267, 269, 273, 273, 276, 277, 283, 284, 285, 290, 293, 296, 298, 300, 302, 305, 308, 312, 314, 315, 317, 319, 321, 325, 329, 331, 330, 335, 340, 341, 342, 348, 350, 352, 356, 357, 358, 349, 360, 371, 372, 373, 379, 381, 383, 387, 390, 394, 400, 400, 403, 406, 408, 410, 411, 412, 417, 418, 419, 421, 423, 425, 426, 427, 429, 430, 431, 433, 435, 437, 440, 441, 442, 443, 444, 444, 445, 446, 448, 450, 452, 452, 454, 456, 456, 459, 462, 462, 462, 462, 464, 465, 469, 470, 471, 471, 473, 475, 476, 477, 479, 479, 479, 485, 485, 485, 485, 487, 487, 492, 492, 492, 493, 496, 496, 498, 500, 501, 502, 502, 502, 504, 506, 507, 506, 508, 509, 510, 510, 510, 510, 515, 516, 517, 519, 520, 521, 522, 523, 525, 526, 527, 529, 529, 529, 529, 530, 531, 531, 531, 532, 531, 533, 535, 535, 535, 535, 535, 535, 535, 536, 537, 537, 537, 537, 538, 537, 540, 540, 540, 540, 540, 540, 541, 540, 542, 542, 542, 542, 542, 542, 544, 544, 544, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 548, 548, 548, 549, 548, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 551, 550, 552, 552, 552, 552, 550, 552, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 555, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 557, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 559, 560, 560, 560, 560, 560, 560, 560, 561, 560, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 564, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 564, 562, 562, 562, 562, 560, 560, 560, 559, 560, 558, 557, 556, 556, 554, 552, 552, 552, 552, 551, 552, 550, 550, 550, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 549, 550, 550, 552, 554, 554, 555, 556, 556, 556, 557, 560, 560, 560, 561, 562, 565, 566, 567, 569, 569, 571, 569, 573, 577, 577, 577, 577, 577, 577, 578, 580, 578, 581, 583, 585, 589, 590, 591, 591, 592, 593, 594, 594, 596, 597, 599, 601, 603, 604, 605, 608, 608, 608, 606, 608, 610, 612, 614, 615, 616, 615, 617, 619, 621, 623, 627, 628, 629, 631, 631, 632, 634, 635, 636, 635, 637, 639, 642, 644, 646, 647, 648, 650, 650, 652, 648, 652, 656, 658, 660, 660, 663, 665, 666, 667, 667, 669, 671, 673, 675, 677, 681, 682, 683, 683, 684, 685, 682, 685, 687, 689, 692, 694, 696, 698, 698, 695, 698, 701, 704, 706, 707, 708, 708, 708, 708, 710, 711, 712, 712, 713, 714, 715, 715, 715, 716, 717, 717, 718, 719, 719, 719, 719, 719, 719, 719, 720, 721, 721, 721, 721, 723, 723, 723, 723, 723, 723, 724, 725, 725, 726, 727, 727, 729, 731, 731, 732, 733, 734, 733, 735, 735, 735, 737, 737, 737, 740, 741, 742, 742, 742, 742, 743, 744, 744, 745, 744, 746, 746, 746, 746, 746, 746, 747, 748, 748, 749, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 751, 750, 752, 754, 754, 754, 754, 754, 754, 754, 754, 754, 753, 752, 752, 751, 750, 750, 750, 750, 749, 748, 747, 746, 746, 746, 746, 746, 744, 743, 742, 741, 742, 740, 739, 737, 737, 736, 735, 733, 731, 729, 729, 726, 723, 722, 719, 719, 718, 717, 712, 712, 712, 710, 709, 708, 707, 706, 706, 706, 706, 712, 716, 719, 721, 725, 729, 735, 738, 740, 742, 744, 746, 748, 750, 752, 756, 760, 767, 769, 771, 774, 771, 781, 786, 790, 796, 801, 806, 804, 802, 800, 798, 797, 796, 795, 794, 792, 791, 790, 785, 781, 777, 775, 768, 760, 757, 756, 752, 748, 744, 742, 741, 740, 737, 737, 737, 737, 737, 737, 736, 733, 733, 732, 731, 729, 726, 723, 721, 724, 727, 745, 762, 780, 780, 815, 850, 856, 862, 879, 883, 887, 804, 802, 800, 797, 796, 790, 789, 787, 781, 781, 781, 775, 774, 773, 771, 771, 767, 764, 760, 827, 833, 846, 846, 854, 854, 871, 878, 885, 897, 896, 921, 923, 925, 940, 943, 946, 948, 952, 956, 953, 952, 946, 942, 935, 935, 932, 931, 927, 922, 917, 912, 910, 908, 914, 904, 894, 894, 894, 881, 879, 877, 867, 862, 856, 871, 892, 900, 903, 906, 933, 943, 952, 990, 993, 996, 998, 1000 };
                s_freehandD = new double[] {0,    15, 16, 17, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 23, 23, 24, 25, 25, 25, 25, 25, 24, 25, 26, 29, 29, 29, 28, 29, 30, 31, 31, 31, 31, 30, 31, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 35, 35, 36, 37, 37, 37, 37, 37, 39, 40, 40, 40, 40, 41, 42, 42, 43, 44, 44, 44, 44, 44, 46, 48, 48, 48, 48, 49, 48, 50, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 55, 55, 58, 58, 58, 58, 58, 58, 57, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 61, 61, 62, 62, 62, 62, 63, 61, 62, 63, 65, 65, 65, 65, 65, 65, 65, 65, 66, 67, 67, 67, 67, 67, 67, 67, 67, 68, 69, 70, 71, 71, 71, 71, 72, 73, 73, 74, 75, 75, 75, 75, 75, 75, 75, 77, 77, 77, 79, 79, 79, 80, 81, 81, 82, 82, 83, 84, 84, 85, 86, 87, 87, 87, 87, 87, 87, 88, 84, 87, 90, 91, 92, 92, 92, 92, 92, 93, 94, 93, 94, 95, 96, 96, 96, 96, 96, 98, 98, 98, 98, 98, 98, 98, 98, 98, 96, 98, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 101, 102, 103, 104, 104, 104, 105, 106, 106, 107, 108, 108, 108, 108, 108, 108, 110, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 115, 116, 117, 117, 117, 117, 118, 118, 119, 120, 121, 121, 122, 123, 123, 124, 125, 126, 126, 127, 128, 129, 129, 129, 129, 131, 131, 133, 135, 136, 136, 137, 137, 137, 137, 137, 137, 140, 142, 142, 143, 144, 144, 145, 146, 147, 148, 148, 148, 148, 148, 150, 152, 154, 155, 156, 157, 156, 160, 160, 160, 165, 166, 167, 169, 169, 169, 169, 169, 169, 170, 171, 173, 173, 173, 173, 173, 173, 174, 175, 175, 176, 177, 177, 178, 177, 179, 179, 179, 179, 179, 179, 181, 181, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 184, 185, 186, 185, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 189, 190, 190, 188, 190, 192, 192, 192, 193, 194, 194, 194, 194, 194, 195, 196, 198, 198, 198, 199, 200, 200, 200, 200, 201, 204, 204, 204, 205, 206, 206, 205, 206, 207, 208, 208, 210, 212, 212, 214, 215, 217, 217, 217, 219, 220, 220, 221, 221, 221, 223, 225, 227, 229, 231, 231, 234, 237, 239, 242, 242, 244, 242, 248, 248, 248, 252, 254, 256, 260, 260, 260, 262, 265, 267, 270, 273, 275, 277, 281, 281, 283, 283, 286, 290, 292, 294, 296, 298, 299, 300, 304, 307, 310, 317, 318, 319, 323, 331, 331, 333, 335, 336, 334, 337, 340, 343, 346, 347, 350, 350, 352, 354, 358, 360, 365, 365, 366, 365, 369, 370, 371, 372, 373, 375, 377, 379, 381, 382, 383, 385, 386, 388, 388, 390, 392, 393, 394, 398, 398, 398, 402, 402, 402, 406, 407, 408, 411, 410, 417, 419, 421, 429, 431, 433, 433, 437, 440, 443, 446, 450, 450, 450, 454, 454, 454, 458, 458, 458, 462, 462, 462, 464, 465, 467, 468, 469, 471, 471, 471, 471, 472, 473, 474, 475, 477, 477, 477, 478, 473, 479, 485, 485, 485, 487, 492, 492, 493, 495, 496, 497, 500, 500, 500, 500, 501, 500, 502, 504, 506, 508, 508, 508, 510, 510, 510, 515, 515, 515, 517, 518, 518, 519, 519, 519, 520, 521, 523, 523, 523, 527, 528, 529, 530, 531, 533, 534, 535, 537, 539, 540, 544, 546, 548, 552, 553, 554, 557, 561, 562, 565, 565, 571, 573, 575, 579, 581, 583, 586, 590, 592, 593, 594, 600, 601, 602, 606, 607, 608, 610, 614, 617, 620, 621, 625, 625, 625, 631, 632, 633, 637, 640, 642, 645, 650, 652, 655, 658, 671, 673, 675, 683, 684, 685, 696, 698, 700, 698, 704, 710, 713, 715, 721, 725, 729, 731, 736, 740, 741, 742, 744, 747, 750, 752, 754, 756, 758, 760, 762, 765, 765, 765, 768, 771, 773, 774, 775, 779, 781, 783, 783, 787, 790, 791, 790, 792, 795, 796, 800, 802, 804, 804, 806, 808, 812, 816, 819, 821, 825, 825, 829, 833, 837, 837, 837, 844, 846, 848, 850, 854, 854, 855, 856, 858, 859, 860, 862, 864, 865, 867, 869, 871, 872, 873, 873, 875, 877, 879, 879, 879, 881, 882, 883, 884, 887, 887, 888, 887, 890, 891, 892, 894, 895, 896, 896, 897, 898, 899, 900, 902, 904, 906, 906, 908, 910, 912, 914, 915, 916, 919, 919, 921, 923, 925, 929, 929, 929, 931, 933, 935, 935, 935, 937, 937, 940, 940, 940, 942, 943, 944, 944, 945, 946, 947, 946, 948, 950, 952, 952, 953, 954, 958, 960, 962, 962, 964, 965, 966, 967, 967, 968, 969, 971, 971, 971, 971, 971, 971, 972, 975, 975, 975, 975, 975, 975, 975, 975, 975, 975, 977, 977, 977, 978, 979, 979, 979, 979, 979, 980, 981, 981, 982, 983, 984, 983, 985, 985, 985, 987, 987, 987, 990, 990, 990, 990, 991, 992, 993, 992, 994, 994, 994, 994, 994, 994, 994, 994, 994, 995, 994, 996, 996, 996, 998, 998, 998, 998, 999, 999, 999, 1000 };
            }
        }
        /// <summary>
        /// (x,y)=(0～1000, 0～1000)。x=0,1,2,...,999の時にいろんな規則で増加するyの値を格納した1001個の配列を取得します。
        /// </summary>
        public static double[] getYs(EGraph・グラフの種類 _graphID)
        {
            // 予め格納された成長曲線グラフの初期化（ここで初めてメモリを食う）
            loadEGraphs();

            double[] _returnGraph = null;

            if (_graphID == EGraph・グラフの種類.freehandA_成長曲線まったりいこうぜ＿直線波揺れ型) {
                _returnGraph = s_freehandA;
            }
            else if (_graphID == EGraph・グラフの種類.freehandB_成長曲線ジグザグいこうぜ＿階段型)
            {
                _returnGraph = s_freehandB;
            }
            else if (_graphID == EGraph・グラフの種類.freehandC_成長曲線早いとこいこうぜ＿円弧型)
            {
                _returnGraph = s_freehandC;
            }
            else if (_graphID == EGraph・グラフの種類.freehandD_成長曲線遅咲きでいこうぜ＿指数関数増加型)
            {
                _returnGraph = s_freehandD;
            }
            return _returnGraph;
        }
        /// <summary>
        /// (x,y)=(_xMin（ただし0以上の整数）～_xMax, _yMin～_yMax)。x=0,1,2,...,_xMaxの時にいろんな規則で増加するyの値を格納した1001個の配列を取得します。
        /// 
        /// ※これを生成しておくと、あとは返したdouble[]型の配列を参照して、　_graph[x]　で簡単にyの値が取得できます。
        /// </summary>
        public static double[] getYs(EGraph・グラフの種類 _graphID, int _xMin, int _xMax, double _yMin, double _yMax)
        {
            // 予め格納された成長曲線グラフの初期化（ここで初めてメモリを食う）
            loadEGraphs();

            double[] _returnGraph = null;
            //int _returnGraphLength = (_xMax - _xMin)+1; // 配列はmin1～max100でも(100-1)+1=100個だよ。
            double[] _baseGraph = getYs(_graphID);

            // 配列数を計算
            int _returnGraphLength = (_xMax - 0) + 1; // _graph[x]で代入できるように、例えばmin5～100でも配列は0～100の(100-0)+1=101個作ります。
            int _baseGraphLength = (s_graphXMax - s_graphXMin) + 1; // _baseGraph.Lengthと一緒だけど一応こっちで合わせとく

            // 配列数が一緒だったら
            if (_returnGraphLength == _baseGraphLength)
            {
                // 元の配列の値を変更されない様、配列のコピー
                _baseGraph.CopyTo(_returnGraph, 0);
                double _scaleValue = (_yMax - _yMin) / (s_graphYMax - s_graphYMin);
                for (int i = 0; i < _returnGraph.Length; i++)
                {
                    // スケール変換
                    _returnGraph[i] = (_returnGraph[i] - s_graphYMin) * _scaleValue + _yMin;
                }
            }
            else
            {
                // 配列数変換とスケール変換
                _returnGraph = new double[_returnGraphLength];
                // 元のグラフにスケール変換したxとy
                int _basedX;
                double _basedY;
                double _scaleIndex = (double)(_baseGraphLength-1)/(double)(_returnGraphLength-1);
                double _scaleValue = (_yMax - _yMin) / (s_graphYMax - s_graphYMin);
                for (int i = 0; i <= _xMax; i++)
                {
                    // 配列数変換
                    _basedX = (int)((double)i*_scaleIndex); // 切り捨てしてるしbaseの配列数を超えないはず

                    // スケール変換
                    _basedY = (_baseGraph[_basedX] - s_graphYMin) * _scaleValue + _yMin;
                    _returnGraph[i] = _basedY;
                }   
            }
            return _returnGraph;
        }
        /// <summary>
        /// (x,y)=(0～1000, 0～1000)。x=_xの時にいろんな規則で増加するyの値を返します。_xの値が不正な場合はdouble.NaNを返します。
        /// </summary>
        public static double getY(EGraph・グラフの種類 _graphID, int _x)
        {
            // 予め格納された成長曲線グラフの初期化（ここで初めてメモリを食う）
            loadEGraphs();

            double _y = 0;
            double[] _ys = getYs(_graphID);
            // xが配列外の場合は、double.NaNを返す
            if (_x < 0 || _x > _ys.Length - 1) _y = double.NaN;
            _y = _ys[_x];
            return _y;
        }
        /// <summary>
        /// (x,y)=(_xMin（ただし0以上の整数）～_xMax, _yMin～_yMax)。x=_xの時にいろんな規則で増加するyの値を返します。_xの値が不正な場合はdouble.NaNを返します。
        /// </summary>
        public static double getY(EGraph・グラフの種類 _graphID, int _x, int _xMin, int _xMax, double _yMin, double _yMax)
        {
            // 予め格納された成長曲線グラフの初期化（ここで初めてメモリを食う）
            loadEGraphs();

            double _y = 0;
            
            // (i)これでやると一回一回配列を生成して取ってくるから、非効率だし遅い
            //double[] _returnGraph = getYs_ParsedMinToMax(_graphID, _xMin, _xMax, _yMin, _yMax);
            //// xが配列外の場合は、double.NaNを返す
            //if (_x < 0 || _x > _returnGraph.Length - 1) _y = double.NaN;
            //_y = _returnGraph[_x];


            // (ii)元のグラフのxの配列インデックスをスケール変換してyを取得し、そのyの値をスケール変換
            // 配列数を計算
            int _returnGraphLength = (_xMax - 0) + 1; // _graph[x]で代入できるように、例えばmin5～100でも配列は0～100の(100-0)+1=101個作ります。
            int _baseGraphLength = (s_graphXMax - s_graphXMin) + 1; // _baseGraph.Lengthと一緒だけど一応こっちで合わせとく
            // 元のグラフ
            double[] _baseGraph = getYs(_graphID);
            int i = _x; // iはreturnGraphのx
            // 元のグラフにスケール変換したxとy
            int _basedX;
            double _basedY;
            // 配列数変換
            _basedX = (int)((double)i * ((double)_baseGraphLength / (double)_returnGraphLength)); // 切り捨てしてるしbaseの配列数を超えないはず
            // スケール変換
            _basedY = _baseGraph[_basedX] * ((_yMax - _yMin) / (s_graphYMax - s_graphYMin)) + _yMin;

            return _y;
        }
        #endregion


    }
}
