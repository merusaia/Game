(CopyLEFT)2013 Public Domain, All Right RELEASED.（著作権フリー。複製・改変・宣伝・無断配布・商用使用などはご自由に）

■みんつくプロジェクト最新版の配布場所
===================================================================================================
最新版は、いつでもここにＵＰするようにしています。
・DropBox 「minRPG_みんつくプロジェクト」ディレクトリ（フォルダ）
https://www.dropbox.com/sh/t52la8g6yt5c6s4/I5gg5xG9lf/minRPG_%E3%81%BF%E3%82%93%E3%81%A4%E3%81%8F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88
====================================================================================================
（URLを変更する場合は、必ずTwitter（https://twitter.com/merusaia）と個人HP（http://merusaia.higoyomi.com/）で告知します）

「プログラム」内のコンテンツは、全て著作権フリー（パブリックドメイン　＝　地球の公共物 ）です。
プログラムのソースコード、文章の内容、素材、アイディア、など、全ての著作権を放棄します。
どなたでも、ご自由に無断使用・改変・複製・二次配布・再配布・商用使用などしていただいてＯＫです。
みんつくプロジェクトが、あなたのゲーム／コンテンツ制作やプログラミングに少しでも役立てば幸いです。

それでは、楽しいクリエーションライフを＾＾。



＝＝＝＝＝＝＝＝プログラムの説明書（自分でゲーム制作をしたい方向け）＝＝＝＝＝＝＝＝＝＝

■はじめに
『皆で創るＲＰＧ制作プロジェクト（みんつくプロジェクト）』をダウンロードしていただき、ありがとうございます＾＾。

みんつくプロジェクトは、「人類皆がクリエーターになれるような、ユーザ参加型のＲＰＧ（皆で創るＲＰＧ）」を制作する試みです。
現時点ではただのWindowsフォームアプリケーションで、絵もなくシナリオもなく、
出来ることもキャラ作成とドラクエバトルえんぴつ風な戦闘（ダイスバトル）位ですが、
将来的にはＷｅｂアプリ化し、様々な戦闘スタイルによるネット対戦・協力プレイ、
様々なクリエーターが作ったキャラの参入、キャラボイス即席参入、個々のユーザによる独自のゲームシステムカスタマイズなど、
ユーザが気軽にゲームづくりに参加できるような、新しいタイプのＲＰＧ（皆で創るＲＰＧ）にしていこうと考えています。

また、ソースコードは、yaneSDKを使用して作った、無償の.NET用ゲーム制作ツールとしてもご自由にお使いいただけます。
コアなプログラマーの方はもちろん、プログラミング初心者の方にも、役立つツールづくりを目指しています。
もちろん著作権フリーなので、ソースは必要な部分だけ自由にコピペして使っていただいても、全く問題ありません。むしろ歓迎します。

なお、このドキュメントには、
	・VisualStudioの役立つ使い方
	・インテリセンス（入力候補がリスト表示される機能）をフルに活用した命名規則
	・末尾に日本語を付加してクラスやメソッドの機能を一目で理解する方法
などなど、ゲーム制作を楽しくするプログラミングや環境作りについても紹介しているので、
もしプログラミングに興味をお持ちの方は、よろしければ最後まで一度目を通していただけると幸いです。


■なぜ著作権フリーなのか？
・「プログラム」内にあるコンテンツは、全て『著作権フリー（パブリックドメイン）』とします。

	筆者はVisualBasicからプログラミングを始め、C++、Java、Ｃ＃と移行してきた、しがないゲームプログラマーの一人ですが、
	これまで自分一人（正確には一人ではありませんが）でゲームを作ってきて、痛感したことがあります…。
	それは、
		【ゲームは一人で作るものじゃなくって、皆で創るもの】
	ということ。
		～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
	　	世に感動を与えるゲームは、アイディアも、シナリオも、絵・ＣＧも、音楽も、システムでさえも、魂が込もっている。
		それは、『いいゲームを作りたい』という開発者の純粋な気持ちと、ユーザとの気持ちが溶け合った時、生まれる。
		しかし、最近のゲームには売り上げやもうけ重視のゲームが目立ち、あげくの果てに著作権がらみの訴訟まで起こる始末。
		ゲーム開発者として、所有権（著作権など）に縛られるというのは、いかがなものか…と思う。
		
		私もかつて、「自分が作ったゲームでひと山当てたい」と思っていたこともあった。
		だけど最近のゲーム業界をみると、「まずはいいゲームを作らないと。もうけなんて後回しでいいじゃないか」と感じる。
		例えば、これまで数百を超えるゲームをしてきた中で、私が人生で最も感動したゲームである、
		「なんと○○○がおきあがり、なかまにしてほしそうにこちらをみている」というセリフで有名な「ドラクエ５」や
		３Ｄのキャラを一からクリエーション出来るようなキャラクリの面白さをユーザに伝えた「ソウルキャリバー３」の開発者が、
		「これは自分たちが考えたシステムだから、真似しないでね」なんて言うだろうか。
			→	言わない。言わないからこそ、真似されるほどいいものができる。
		同じく、VisualStudio開発チームやEclipseプロジェクトなど、無償の開発環境を提供してくれているエンジニアが、
		「これは自分たちが作ったんだから…」なんて考えているだろうか。
			→	否。「多くの開発者にとって使いやすい環境を整えたい」という気持ちでいっぱいだ。だからいいものができる。
		これらの開発環境がもし有償だったら…Enterprise JavaBeans(EJB)がいい例だ。ユーザはどんどんフリーな方に流れていく。
		有償のプログラムやライブラリも同じ。いくらいいものを作っても、誰も使ってくれない。
		iPhoneアプリやAndroidアプリにたくさんの開発者が流れた。ついにはPSVita用ゲーム開発環境PSMStudioまでも登場した。
		それらの開発環境も、ほぼ全て無償で提供されている。たとえ開発費が何十億かかろうとも…。それはなぜか。
			→	「無償で提供したら、誰かがきっといいものを作って広めてくれる」と信じているからじゃないだろうか。

		そもそも、「自分だけで作ったもの」なんて、この世の中に存在するだろうか。
		強いて言えば、統合開発環境、パソコン、キーボード、インターネット、電気、紙や鉛筆、アイディアでさえも、
		過去の偉人たちが苦労して作ったものだし、代々受け継がれてきたものだ。全ては地球の構成要素であり、共有物。
		まずはそれを使わせてもらって、面白いゲームを作る。そうしたら、お金なんて後でいくらでもついてくるよ、きっと。
		そういう気持ちからじゃないと、これから世に広まる『いいゲーム』は生まれない気がする。
		
		これからは、人類皆がクリエーターになれる時代。誰が作ったかなんて、関係ない。
		みんなでつくるゲームだから、みんなが作れるようにする。全部が公共物で著作権フリー。
		だから、みんなで『いいゲーム』を作ろうよ　…（恥）」
		～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
	こんなポリシーのもと、著作権を放棄しています。
	

■その他のプログラムの著作権について
・「プログラム」以外のコンテンツは、著作権は放棄されていない著作物が含まれています。
	○「その他\無断使用可」には、無断使用・再配布・改変・複製・二次配布・再配布・商用使用可能なものだけを集めています。
		従って、この中の素材（画像・音楽・効果音など）、ライブラリ（.dllなど）、ソースは自由に使えます。
		ただし、中には著作情報の表示を義務付けている著作者様もいるため、著作情報は明記してください。
			（面倒な場合、このファイルをそのまま配布するか、この項目内の文章をコピペするだけでＯＫです）
	●「その他\著作者に連絡が必要」には、それ以外の素材、ライブラリ、ソースを入れています。
		これらの著作情報は、「皆で創るゲーム\bin\\Debug\_Read Me★はじめにお読みください。.txt」を見てください。

・みんつくプロジェクト（_minGame.csproj）では、○「その他\無断使用可」にある、
	以下の無断で使用できるライブラリを使っています。

・YaneSDKライブラリ（.NET用のマルチプラットフォームなゲーム開発ライブラリ。参照名：Yanesdk）
	製作者：やねうらお様、他 http://yanesdkdotnet.sourceforge.jp/
	動作環境：.NET Framework2.0以上

・簡単WAVE録音再生DLL（参照名：WaveIO2_ClassLibrary2.dll、ClassLibrarySub3.dll）
	制作者：mikeo410様(mikeo_410@hotmail.com) http://mikeo410.lv9.org/lumadcms/~PCMDLLWaveIO2DLL
	動作環境：.NET Framework2.0以上

・Twitterizer2（.NET用ツイッターAPIラッパーライブラリ。参照名：Twitterizer2）
	制作者：digitallyborn様(ricky@digitally-born.com), Copyright 2012 Patrick "Ricky" Smith, Twitterizer Group http://www.twitterizer.net/
	動作環境：.NET Framework4.0以上（※注意:ここだけ、4.0以上。.NET Framework2.0や、.NET Framework4.0 Client Profileでもダメです）
	※使い方の参考URL：Twitterizer2の使い方（日本語） http://mimumimu.net/blog/2011/11/23/twitterizer-%E3%81%A7-userstream-%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%80%82/
	
なお、「著作権なんてめんどくさい…」という人は、とりあえず「その他\著作者に連絡が必要」だけローカルに保存しておいて、
	あとは、必要なところだけ、切って貼ってＷｅｂにＵＰするなり、煮るなり焼くなり、好きにしてください。

	（※何が言いたいかと言うと、筆者もこういうめんどくさいことが苦手なんです＾＾；。
		だからあえてコピーレフトやオープンソースと言わず、著作権を放棄しています。）


■プロジェクトを開く時の注意
・プロジェクト「_minGame.csproj」やソリューション「_minGame.sln」は、Visual Studio 2010(VS2010)の無償の開発環境である、
	Visual C# 2010 Express(VC#2010)、もしくはVisual Web Developer 2010(VWD2010) で作られています。
	VS2008以前やVS2012で開いてプロジェクト変換ツールを行っても、エラーが起こる可能性がありますので、注意してください。	

・VS2010、VWD2010は、ここで無料でダウンロードできます。（時がたつと、URLが変わっているかもしれません。その場合は「Visual C# Express 2010 ダウンロード」などで検索してみてください）
http://www.microsoft.com/ja-jp/dev/express/default.aspx
（参考）なお、今では検索にひっかからなくなってきた、VS2008C#Expressはここで無料で入手できます。探すのが面倒なので、とりあえずURLだけおいておきます。
http://www.microsoft.com/ja-jp/download/details.aspx?id=6506


■プロジェクトの使用方法（よくあるトラブルシューティング）
・.NET Frameworkのバージョンについて
VS2010やVWD2010で新しいプロジェクトを作ると、「」
			標準の動作環境が、「.NET Framework4.0 Client Profleがインストールされたパソコン」になってしまいます。
			現段階では、それぞれのOSに標準インストールされている.NET Frameworkのバージョンは、
				WindowsXPSP2以上→	.NET Framework2.0
				WindowsVista	→	.NET Framework3.0
				Windows7		→	.NET Framework3.5.1
				WIndows8		→	.NET Framework4.5のみ ( http://techoh.net/enable-old-dotnet-on-windows-8/)
			になっており、動作環境が7は.NET Framework3.0が標準インストールになっており、
			ユーザに.NET Framework4.0を手動でインストールさせる必要が出てきて、いろいろ不便です。
			
	動作環境を「.NET Framework2.0が標準インストールされたパソコン（WindowsXP SP2以上）」にしたい方は、
	プロジェクトを右クリック→「プロパティ」→「対象のフレームワーク」を「.NET Framework2.0」にしてお使いください。
	
・このプロジェクトは、上記のライブラリを使用しています。そのため、プロジェクト参照が必要です。
	例えば、新しいプロジェクトを作成し、「プログラム」以下を全てコピーするだけでは、ビルドは正常には通りません。
 	ビルドを通すには、上記のライブラリの「参照名」を、組み込みたいプロジェクトに「参照の追加」をする必要があります。
	
	Q:コンパイラに【usingが不足しています】や【***.dllやプロジェクトの参照が必要です】と言われる…
		→	A:該当プロジェクトを右クリック→「参照の追加」で、該当dllやプロジェクトを選択

 		例：　ビルドで【Yanesdk.dllの参照が必要です】みたいなエラーが出たら、
			(a) ***.dllだけを追加する
	  		→	1. 該当プロジェクトの右クリック「参照の追加」で、「_minGame/その他/Yanesdk.dll」を選択
			→　2. あとはエラーの部分を左クリック／右クリックして、「using *** を追加」などでエラーを減らしてみて
			
 		例：　ビルドで【'GlTexture'が見つかりませんでした。using ディレクティブが不足しています】みたいなエラーが出たら、
			(a) ***.dllだけを追加する　か、
			(b) ソースコードを追加する
 			→　1. ソリューション右クリック「プロジェクトの追加」で、「_minGame/その他/やねうらお様_YaneSDK_…/Yanesdk.csproj」 を追加
	  		→	2. 該当プロジェクトの右クリック「参照の追加」で、「Yanesdk」を選択
			→　3. あとはエラーの部分を左クリック／右クリックして、「using *** を追加」などでエラーを減らしてみて
			ほとんどのサンプルプロジェクトは「.NET Framwork 2.0」向けに作成してありますので、VisualC# 2010 でプロジェクトを開いた後は、プロジェクトの [プロパティ] から [アプリケーション]タブを開き、[対象のフレームワーク] 欄を「.NET Framwork 3.5」かそれより古いバージョンに変更してください。

	Q:その他、変なエラーが出てビルドが通らないんだけど…
		→	A:該当プロジェクトを右クリック→「対象のフレームワーク」欄を変更するだけでは動作しません。

　その変更に加えて、この2つのプロジェクトでは、VisualC# 2010 で変換した際に、両プロジェクトの [参照設定] 欄に「System.Xaml」という参照が追加されていますので、これをそれぞれの [参照設定] 欄から「削除」してください。
（System.Xaml は .NET Framework 4 を対象としており、また、両プロジェクトでは使用されていません。）

	Q:この方法でも解決しないんだけど…
		→　環境・状況等を添えて、ツイッター（@merusaia, https://twitter.com/merusaia ）、スカイプ（SkypeID:merusaia）、
			もしくはメール（tetsugaku85@gmail.com）宛にメッセージをください。懇切丁寧に教えます。
			「あきらめたらそこで試合終了ですよ（by ○○先生）」
		

■ソースコードと主なクラスがある場所
・ソースコードは、「minRPG_皆で創るゲーム」ディレクトリ（フォルダ）にある「プログラム」に入っています。
　ただ、一見しただけではよくわからない方もいるかもしれません。
　ここでは、このプロジェクトでよく使われるクラスや、ゲーム制作に関係のある部分だけを、質問形式で簡単に紹介しておきます。

	Q:「game.***」って？
		→	ゲーム制作に必要な機能を、わかりやすいメソッド名で簡単に呼び出せるようにした、ゲーム管理者クラスです。
			基本的に、どのクラスも、このクラスのインスタンスさえ、コンストラクタあるいはメソッドの引数に渡してやれば、
			ゲーム制作に必要なほぼ全ての機能の参照できるように設計されています。
			（専門的には、他のクラスの主な機能だけを使いやすくラッピングした、いわゆるラッパークラスです）
			詳しい使い方は、
			「プログラム\C1_システム基本形系\CGameManager・ゲーム管理者.cs」の冒頭部分をみてください。

	Q:ゲームのメインルーチンってどこにあるの？
		→	描画処理やフレーム処理など、一定時間毎に呼び出されるメインメソッドは、ゲーム管理者クラスの
			「CGameManager・ゲーム管理者.updateFrame・フレーム毎に呼び出す入力論理描画などフレーム更新処理()」
			メソッドにあります。

	Q:最初の画面がどれかわからないんだけど？
		→　「プログラム\V1_出力フォーム画面系\FTitle.cs」にあります。
				（誰もがこのフォームクラスを加工してゲーム開始画面を作成しやすいように、
					このフォームの機能は必要最低限だけにｓて、ほとんど何も編集せずにおいてあります。
					なお、このフォームで、CGameManager・ゲーム管理者の初期化や
					「game.mメッセージ***」などで表示するメインメッセージボックスを初期化しています）

	Q:メインの戦闘画面はどれ？
		→　「プログラム\V1_出力フォーム画面系\FGameBattleForm1.cs」にあります。
				（自分なりの戦闘画面を作りたい場合は、このフォームを改良してみてください）
				（なお、既存のFormクラスをコピーして新しいFormクラスを作成する方法は、高確率でエラーが出て
					ソリューション自体が使いものにならなくなるため、おススメできません。
					新しいFromクラスを作成する時は、右クリック→「追加」→「Windows Form」をおススメします）

	Q:自分で一から新しいゲームを作りたいんだけど、どこが参考になる？
		→	「game.***」だけを使って、簡単にゲームの作り方がわかるクラスは、現段階ではテストゲームクラスです。
			「プログラム\テストゲーム\CTestGame・テストゲーム.cs」を見てみてください。

	Q:「MyTools.***」ってなに？
		→	C#や.NETの便利な機能をstaticメソッドにまとめた静的クラスです。
			詳しくは、そのメソッドを右クリックして「定義に移動」を押すか、
			「プログラム\ツール系\MyTools.cs」をみてください。

	Q:既存のクラス・プロパティ・メソッドの名前を、自分で好きな名前に変えてもよい？
		→	もちろん構いません。作者が書いた名前も、無駄に長かったり、変なものがあったりするかもしれません。
			変えたい部分を右クリック→「リファクタリング」→「名前の変更」をしてください。

	Q:既存のクラスに自分で好きなプロパティ・メソッドを追加・編集してもいい？
		→	もちろん構いません。是非そうしてください。
			自分で作ったソースを公開しない場合は、好きにしてください。
			自分が作ったソースを配布したい場合は、元のクラスをコピーして別のクラス名として追加・編集するか、
			ソースコードを冒頭あるいは末端などにまとめて追加していった方が、あと後便利かもしれません。
				（メルサイアが新しいバージョンを公開した時に、追加部分をそのままコピペして使えるようにするため）

	Q:ディレクトリ（フォルダ）の名前のはじめについてる「M」「V」「C」て何？
		→　Model_View_Controller（MVC）の略です。
			プログラムを作る際、モデルのデータ構造を定義する部分（Model）と、画面に描画される部分（View）、
			それら２つをコントロールする部分（Controller）の３つを分けて書いておいた方が、
			仕様変更やゲーム移植の際に変更の強い、汎用性の高いソースになるといわれています。
			詳しくはwikiなどを見てください。　http://ja.wikipedia.org/wiki/Model_View_Controller
			このプロジェクトでは、このMVCの頭文字一文字に連番を付けて、
			かつ開発者がフォルダ内にどんなクラスが入っているかがわかるように、
			「C1_システム基本形」、「C2_ユーザ入力系」といった日本語名でフォルダ分けしています。
	

・その他、わからないことがあれば、以下を試してみてください、
	Q:クラス・プロパティ・メソッドの意味がわからない
		→	マウスカーソルを当てる			→	表示される情報（≒インテリセンスに表示される情報）を見る
	Q:クラスにどんな機能があるのかわからない
		→	「クラス名.」と入力				→	表示される情報（インテリセンスに表示される情報）を見る
	Q:メソッドに渡す引数の種類がわからない
		→	「メソッド名(」と入力			→	その直後に「↓」「↑」キーを押して、引数の異なる同名メソッドの情報を見る
	Q:どこに定義されているかがわからない
		→	わからない部分を右クリック　	→	「定義に移動(G) F12」を選び、その周辺を見る
	Q:使い方がわからない
		→	わからない部分を右クリック　	→	「すべての参照の検索(A) Ctrl+K, R」で、使い方を確認する
	Q:その他、それでもわからない場合。バグや改善要望がある
		→	ツイッター（@merusaia）やメール（tetsugaku85@gmail.com）でも質問・相談・要望などを受け付けます。


■日本語付加プログラミングの利点
・このプロジェクトは、「プログラミングになじみのない人にも読めるソースを」という筆者のポリシーで、
クラス名・メソッド名などの後ろに、出来るだけ日本語を付加しています。

・「名前も長くなるし、かえって効率が悪いんじゃないの？」と言われる方も多いかもしれませんが、日本語を付加することで、

	1.  使い慣れた日本語だと、クラス・列挙体・プロパティ・メソッド・変数などの内容が一目でわかる

	2.  自分たちが作ったクラス／列挙体と、標準ライブラリなどが作ったクラス／列挙体などを瞬時に判別できる

	3.  インテリセンス（使用可能な候補が表示される機能）を使えば、英語は頭文字だけで十分、目的の機能を呼び出せる

	4.  読みにくい場合は、プロジェクト全体を置換「"・*"→""」とすることで、ソースから日本語だけをいつでも削除可能（一部の日本語専用クラスを除く）

	5. 何より、プログラミングが楽しくなる。

　といった利点があり、統合開発環境（VisualStudio/Eclipse/PSMStudioなど）やインテリセンスの恩恵を最大限受けられます。
　（やっぱり日本人だもの。日本語を使った方が、頭の回転も速いし、ストレスも少ないです。是非おためしあれ。）


■ソースの命名規則
・基本的にJavaとC#の記法（CamelとPascalの融合）を参考に、以下の法則を元に書いています。
	固い決まりごとではありませんが、このように書くことで、インテリセンスで必要な機能をすぐに参照することができます。

例：	ローカル変数だけを参照したい				→	「_」と打つ
		使用可能な動的プロパティの一覧を見たい		→	「p」と打つ
		列挙体の一覧を見たい						→	「E」と打つ
		使用可能なクラスの一覧を見たい				→	「Cクラス名.s」と打つ
		静的プロパティの一覧を見たい				→	「Cクラス名.s」と打つ
		何かを取得するメソッドを探したい			→	「get」と打つ

	・クラス名:
		・動的クラス:			「C*」			＋	必要に応じて「・クラスの内容が理解しやすい日本語」
		・静的クラス:			「My*」			＋	必要に応じて「・クラス内のstaticなプロパティ／メソッドの内容が理解しやすい日本語」
		・抽象クラス:			「I*」			＋	必要に応じて「・インタフェースの内容が理解しやすい日本語」
		・Windows.Formクラス:	「F*」			＋　必要に応じて「・フォームクラスの内容が理解しやすい日本語」
		・その他のクラス:		「*（規則無）」	＋	必要に応じて「・クラスの内容が理解しやすい日本語」
	・列挙体名（enum名）: 
		・列挙体名:				「E*」			＋	必要に応じて「・列挙体のstaticな要素の内容が理解しやすい日本語」
		・列挙体の要素名:		「*（規則無）」	＋	必要に応じて「_」または「＿」＋「要素の内容が理解しやすい日本語」
	・プロパティ名（メンバ変数名）：
		・動的プロパティ:		「p*」			＋	必要に応じて「・staticでないプロパティの内容が理解しやすい日本語」
		・静的プロパティ:		「s*」			＋	必要に応じて「・staticなプロパティの内容が理解しやすい日本語」
		・その他のプロパティ:	「*（規則無）」	＋	必要に応じて「・staticなプロパティの内容が理解しやすい日本語」
	・メソッド名（メンバ関数名）:
		・取得メソッド:			「get*」		＋	必要に応じて「・取得するものと引数の内容が理解しやすい日本語」
		・設定メソッド:			「set*」		＋	必要に応じて「・設定するものと引数の内容が理解しやすい日本語」
		・bool型を返すメソッド:	「is*」			＋	必要に応じて「・値がtrueやfalseの時のの内容が理解しやすい日本語」
		・その他のメソッド:		「*（規則無）」	＋	必要に応じて「・メソッドの内容が理解しやすい日本語」

	※ここで「*」は、通常の英語表記でつける名前で、任意の英数字0文字以上を指します。
		（普通は1～3文字以上です。場合によって、日本語専用クラスの場合は0文字ということがあります。
		なお、大文字小文字の区別は文字は、Java式かC#式で好みが分かれるので、基本的にどちらでもいいことにしています）

・また、必須ではありませんが、これらの表記もプロジェクト内で統一しておいた方がいいでしょう。
	・その他の表記（プロジェクト内で統一しておきたいもの）:
		・ローカル変数:			「_*」			＋	必要に応じて「・ローカル変数の内容が理解しやすい日本語」
		・bool型変数:			「*is*」		＋	必要に応じて「・値がtrueやfalseの時のの内容が理解しやすい日本語」
		・その他の変数:			上記＋「***」	＋	必要に応じて「・プロパティの内容が理解しやすい日本語」
		・C#で定義された文字列:	"\n"（改行コード）
								"\t"（タブ文字を記入する、タブコード）"
								"\b"（※非推奨。一文字消す、バックコード。ただ、テキストボックスの挙動が不自然になるので、あまり使わない方がいいかも）
								"\\"（ファイルパスのディレクトリの区切り。"/"でも動作するが検索時に見落としやすいため、これで統一）
		・独自で定義した文字列:	"【p】"（テキストボックスなどのボタン送りに使用する、独自のページ送りコード）
								"【w】"（テキストボックスなどに表示する際一定時間待機を起こさせる、独自の待機コード）
								"【c】"（テキストボックスなどの以前のメッセージを白紙にする、独自の消去コード）
								"【b】"（テキストボックスなどの手前の一文字を消す、独自のバックスペースコード）
								"\\c"（テキストボックスなどで１文字消す動作をさせる、カットコード）
		・エラーを指す値：		null（クラス型）、-1（値型）、""（string型）…（検索に失敗したなど、正常に取得できなかった場合に格納する値）


■みんつくプロジェクトの名前空間について
なお、このプロジェクト内の名前空間は、基本的に「everyoneCanCreate」で統一されています。
ですので、「using PublicDomain;」と書くだけで、ほぼ全てのクラスにアクセスできるようになっています。
もし必要があれば、自由に変更して使っていただいて結構です。


それでは、楽しいプログラミングライフを＾＾。



＝＝＝＝＝＝＝＝＝以下、更新情報（自分用のメモや開発日記含む）

○更新情報
・2010/09/25:	FGameBattleForm1.csフォームに、「ボイス録音」というボタンがありますが、数日やってみてできませんでした。非表示にしてます＞＜。

[TODO]（●が重要バグ、○が。特に★は最重要事項未着手、☆は最重要事項完成。・はその他の通常メモで未着手／完成どちらでも可）
121206
○・twitterに１日１回宣伝する！　→　多すぎるので一週間に１回にする
・・・テスト版は、容量減らし、ＢＧＭはおまけだけで。
・・・すぐにバージョンアップ版を貼れるようなしくみ（dropboxだから簡単のはず）

・待ち時間の最適化（前待ち時間メソッドを呼んでから、実際に立った時間p0を計算し、t-p0時間だけ待つようにする）
○・・・回避時の待ち時間をすこしふやす（見えない）

・ダイスコマンドにちゃんとカッコいいコマンド名・技名をつける
・・・ダイスコマンドが毎回リセットされないか確認（キャラクターロード時も）

・根性・自然回復・ＳＰ消費行動などの実装


・キャラ生成の確認画面でいいえ押したときに最初からになるのはまずい（メッセージボックスでもいいからフォーム２上で確認画面を出せ）
○・１Ｐのクリティカル率表示されてない

○・攻撃力低いと戦闘が終わらない（モンスターファームみたいに１０～２０ターンで判定に持ち込み）
○・負けてもゲームを辞めるに行けるようにして…つらい。
○・ダイスマス目復活のアルゴリズムがおかしい（すぐ復活する）
○・使用済みのダイスマスを押しても「使用できません」ようにする

・コマンドを回避の名前にしたんだから、ミスを止めて回避行動にする。（ミスの台詞バリエーションは回避時のものとどうドッキングする？）
・・・回避行動と防御行動の復活ターン数を短くする！（でないと戦略の幅が広がらない）

○・テキストボックスにフォーカスが当たらないようにする（入力カーソル点滅をやめる）



・Ｅ：兄弟にやってもらったときＳＰが回避しかマス目なくなって攻撃出来ないバグ（敵をプレイヤーキャラにして１０秒間停止したあとにフィエナが出てきてこうなった）


121208
・「やりたい・作って楽しい」て所を創ろう！
・・・一番楽しいのは技のカスタマイズ？☆特技でも性格でも何でも付けたしてく楽しさ、これを他の人にも感じて欲しい☆
・・・戦闘バランスを調整するのも、バランス調整が楽しい・好きだから。ＴＯＤＯではなくＷＡＮＴＯＤＯでね★
・・・・・もしくはちょっとがんばってメインキャラの絵をか描くもよし♪

121209
○g.wウェイト・・の部分をp_timer・ゲームタイマーのwait1Frameに置き換えて、フレーム対応にする！
○・・・さらに、前フレームの処理時間tも計算して。（フレーム待ち-t）時間だけ待つようにする
○・・・やってみたけど、失敗したのは、定期的にlastFrameTimeを更新してない、Formのtimerで定期的に処理してないから！p_timerをFormのtimer1で更新すればＯＫ

121210-14
・入力機器のみなおし
○・特に、ダブル連打・トリプル連打の実装
○・長押しボタンzissou
○・同時押しの実装
○setDouble/Triple/LongPress*** no tuika

121215
・無料レンタルサーバが使える、PHP/JavaでGoogleAppEngineなどを検討してみた。けど、やっぱ本格的にはＣ＃が楽しいと思った。
・・・探せば、ＡＳＰ．ＮＥＴで月300円位のレンタルサーバもある。いける。
・・・まずはWindowsアプリでもいいや。将来的には有料サーバ借りるか、自前でＡＳＰ.ＮＥＴサーバ作る？
・Ｃ＃でtwitter使えるのをとりあえずはじめてみよう。
・プロジェクトをVC#2010にアップグレード。yaneSDKのＳＤＬが読み込まないP/Invokeのアンマネージシグネチャごにょごにょ（PInvoke シグネチャがアンマネージ ターゲット シグネチャに一致していないことが原因として考えられます。）
　　…の例外のエラーがあったが、これは.NET Framework4.0を使っているからみたい（2.0にしたら通った）
・・・さぁどうするか。ＳＤＬのバージョンが悪いというよりも、コード自体が4.0に対応していないみたい（たぶん例外処理が厳しくなった）。
・・・それ以外は動くのに…シクシク；＿＋。。
○・→とりあえず解決。yaneSDKのバージョンは２．０のままにしておけば問題ない。

121215-30
○・ＬＶＵＰ必要経験値など、成長曲線をつくらないといけなかったので、これをフリーハンドでグラフを作れるアプリ（FDraw.frm）
○・・・Imageに描いて、グラフ特有の上書き処理（線形補完など）をして、Undo/Redoの実現
○・・・一番デバッグで苦しんだところは、using(Graphics g = pictureBox1.Image){} 内に、
○・・・・・・pictureBox1.Image=nullとか_newImageとか、Imageを変更するコードを書いてしまって、それでもエラーにならずGraphicsが何も書けなくなってたこと・。
○・・・→解決。だいぶ完成してきた。
・・・後はFormにしとくとコピーできないから、MyGraphかMyDrawとしてクラス化しとくか。

121231
・せっかくだから、上のDFrawを、お絵かきの線画専用Windowsアプリにできないか？
・・・画像を読み込んで、その上からなぞりがき。タッチ（タブレットＰＣ）になったら更にすごい効率上がるかも。
・・・サッサ描きを実現。一定距離内にある線を消して更新。右クリックだけで消しゴム切り替え（タッチならフリック←）とか。あまり誰もやってない？
・・・ベクター画像（.emf）も対応して、線画だけ保存しておければ、後でも編集可能に出来る。
・・・・・問題は、どんどん欲望がでて、ズームとか移動（タッチ実装）、○や□や線画のドラッグ＆ドロップとかもできるようにしたい、とかなると面倒なことかな。
○・とりあえず保留。グラフ上書きのエラーだけ取って、後は適当に早くチームバトル実装に移ろう。ラスボス３０参考に手早く。

130101
・あけおめ。
・サーバなくてもWebサービスできるかも。スマホで軽いサーバプログラムAndroidアプリ立ち上げて、On_ユーザID.txtファイルの有無でデットロック回避＆中身見ずにユーザのオンライン確認できるとか。まぁ小規模ならね。
・・・オンラインストレージや任意の場所にファイルが置けるか。追加・削除・編集ができるかが鍵かな。

130102-03
・Ｉｍａｇｅにタグをつけるのに、PropertyItemとかで実装してて、どの画像もこれ持ってなくって、もう嫌になった
・・・そういや、object型でTagてプロパティあるじゃん。もういい、これで実装しようよ。
130104-06
・Ｉｍａｇｅ.Tagでタグ付けてみたけど、画像が「使用不可な画像」て画像になるとか偉いことになって中段ジャブ、ノックアウト
・他、Ｍｐ３のファイル属性取るとか、なんかいろいろやってたけど、はよコア作ってことで中断、ＫＯ
・とりあえず、もうええわ。どうせＷｉｎｄｏｗｓ依存やし。バトルつくろ

130107-08
・チームバトルの作ったひな形作った。まだ動いてないけど、いけそうや。
・複数ＨＰ，３～６色バーＨＰシステム、リアルタイムバトルもやったるで～

130108-17
・この１０日は入力関係とサウンド関係とCGameDataのリファクタリングでつぶれた…か。
・とにかく、トリプルクリック出来た！がんばった！
・次の1週間で、BGMメドレーでpauseしながら、効果音鳴らして、タイミングバトルのひな型作れるといいな～なんて…。シレン風な成長アイテム・特技の改造もね

130118-24
・とりあえずソース公開するため、gameクラスの整形・リファクタリングがんばった。だいたい整理されてきた。
・ゲームで認識可能なボタン入力ibのテストがんばった
・音が鳴らないエラーがんばった…

130124-0131
・みんつくプロジェクトのドキュメント作成。クラスの説明ＦＡＱ執筆。これでやっと人目に触れてもある程度読めるようになってきたかなぁ…
・プロジェクト全体のリファクタリング、プログラムのフォルダ分け、だんだん綺麗になってきた

130201-0204
・リファクタリング、Audio系とInput系がだいぶ綺麗になってきた
・オーディオデータの参照名AudioDataName（これに統一）は何でもいいとする。（制限を付けたら開発が楽しくなくなるので。）
	例：　一段階パスの「拡張子の含まないファイル名（***.mp3の***だけでフルパスは含まない）」、抽象的なイメージ、ランダム再生、など。
		抽象的なEnum型のESE・効果音やEMusic・曲とファイル名（実際再生されるファイル名）との関係は、　1:多、または多:多　とする。（要するに、1:1の関係じゃないってこと）
			もちろん、game.pBGM(string _fileName_FullPath)やgame.pSE()で、ファイル名を直接与えて再生することもできる
					しかし、「e01_battole1・通常戦闘曲」などで、再生する音楽を状況に応じて変えたい時、役立つのがenum型。
			enum型とファイル名の対応表は、基本的に「サウンドデータベース.csv」で管理
				サウンドデータベースにある曲は、使用可能な曲ファイルと効果音ファイルを調べ、予め対応づけ・ファイル存在確認をしてから、AudioDataにする。
				サウンドテストフォームFSoundで編集可能にして、終了時に更新する。
			以下、理想的なEnum型の書き方？
				Enum型のESEType・効果音は抽象的な効果音（例：「e01_attack01・味方の攻撃」）とし、できればファイル名や擬音語を入れないようにした方がいいかも。擬音語は、それぞれの効果音ファイル名の最後に入れることとする（「***_ジャキン.wav」など）。
				Enum型のEMusicType・曲に抽象的な曲種類（例：e01_battle1・通常戦闘曲」）とし、できればファイル名を入れないようにした方がいいかも。音楽ファイル名は曲名だけで、最後には何もいれなくてもいい。（「曲名.mp3」として認識する）
・自動入力エミュレータの実装
	チュートリアルなどのときユーザの入力より優先する自動入力も必要だから、強制自動入力も付ける
	setPullだけでいいかと思っていたが、格闘ゲームの基本はPushだったり…。やっぱりsetPush/setFreeもつくるか。。。
		でも自動入力はどれを採用しよう？ →　とりあえずはsetPullで。

130205
・MyTools.getEnumCountの見直し
・細かいエラー対処
・・・メッセージボックスをＤＱ風に（【p】じゃなくっても、行待つまでいったら、１行目からスタートするように、N行改行する）
・・・ストーリーモードの改行を決定ボタン押し飛ばす
・・・ダイスコマンドの復活ターンを半分に。２回連続同じ攻撃でもいいじゃない
・・・あとはがんばってテストプレイして、弾き入れる確率、バランス考えて導入して
・新しいアイディア
・サウンドエラースターク（エスターク＋α）「グゴゴゴゴ…なんということだ、この私が、たったの２日でねだやされてしまう（倒されてしまう）とは…。しかし次はそうはいかんぞ、グゴゴゴゴ…」いや、もうこんでええって。
・ＳＦＣ版ＤＱ５エスタークのオリジナル文（変更検討箇所はカッコ）
「グゴゴゴゴ…\p誰だ？\nわが眠りを さまたげる者は？\pわが名は エスターク（エラースターク）……。\n今は それしか 思い出せぬ……。\p今は 自分が 善なのか 悪なのか \nそれすらもわからぬのだ……。\pその私に なに用だ？\n私を ほろぼすために \nやって来たのか？（醸しに／根絶やしにきたのか？）　→はい／いいえ
	はい：ならば しかたがないな。\n私は ほろぼされるわけには いかぬ。\pさあ くるがよいっ！
	いいえ：ならば 立ち去るがよい。\n私は 今しばらく 眠ることにしよう。\nグゴゴゴゴ……。」
「グゴゴゴゴ……。\nなんということだ……。\pこの私が たったの○ターン（４日）で \nやられてしまうとは……。\pしかし この次は \nそうは いかぬぞ。\nグゴゴゴゴゴゴゴ……。」 http://www.youtube.com/watch?v=b4XUA3HCz68
なんと エスタークが おきあがり \nなかまに なりたそうに こちらをみている！\nなかまに してあげますか？　→はい／いいえ
	はい：エスタークは うれしそうに ばしゃにかけこんだ！（優しそうな目で主人公たちを見つめながら、仲間に加わった！） 
	いいえ：エスタークは さびしそうに（かなしそうに／うらやましそうに／悲しそうな目をしながら） さっていった！

130206
・#エラースターク戦 選択肢、メソッド日本語、英語名、擬音語、条件付きトークン…あらゆる文字列を瞬時に取得可能なgetWords()メソッドに潜む、最難関エラースタークとの闘いともついに終盤…
	メルサイアの閃きの一撃！なんと、区切り文字の文字数を考慮していなかった!→エラースタークに600ポイントのダメージ！　おっしゃあっ！！
・#エラクエＶ　なんと エラースタークが おきあがり \nなかまに なりたそうに こちらをみている！\nなかまに してあげますか？　→はい／いいえ　http://www.youtube.com/watch?v=b4XUA3HCz68
.NET開発仲間へのメール
	エラスターク、ついに、、ついに撃破しましたよ！！　長かった…Ｔ-Ｔ（泣）
・柔軟にキーワード分割を可能にする文字列処理メソッドgetWords()を実現
	あまりコン詰めず、自分自身を許しつつ、しんぼうづよく見守っていかないと、
	せっかくの楽しいゲームプログラミングが、逆にストレスになってしまう…と、いつも痛感…。
・エラコンクエストＶ　～そして征服へ～
	エラーをドラクエのモンスターのように可愛がり、楽しくコンプリートして行く物語。
	
130207-0223
・エラクエＶ、メインテキストボックスエラー（通称バラモス）を約６日（風邪やインフル兄弟看病含む）撃破(2/14)。
	一文字ずつ表示時のちらつきはWindows.Formの限界により、あきらめた。
・エラクエＶ、サウンド鳴らないエラー（通称シドー）を攻略…カスタムＢＧＭ・効果音機能を追加。約９日で撃破（2/23）

・戦闘に空中コンボを取り入れると面白いかも

【開発環境TIPS】
・複数行コメントのショートカットは「Ctr+K+C」、コメントアウトは「Ctr+K+U」
・#region～#endregionの折りたたむのは、右クリックして、「アウトライン」 -> 「すべてのアウトラインの切り替え」　で展開するようです。http://social.msdn.microsoft.com/forums/ja-JP/vsgeneralja/thread/63ecfab4-ff37-4459-8864-628520f3b650/
・１ファイルの複数ウィンドウ分割は、右スクロールバーの上の引き伸ばし矢印をドラッグ。変数定義とメソッド部分を行き来する際、かなりの時間ロスを削減できる。便利だよ
http://www.atmarkit.co.jp/fdotnet/dotnettips/256vsdoubleview2/vsdoubleview2.html
・VWD2010（Visual Web Developer2010）以降で開発するなら、NuGetの利用は新標準？らしい。一応やり方覚えておくと、ＷｅｂＡＰＩが簡単に使えて便利だよ
http://mimumimu.net/blog/2011/11/22/nuget-%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%AB%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%80%82/
・.NET アプリのアセンブリは .NET Reflector などを使用する事でソースコードを逆コンパイルできる。ライブラリ化したって第三者に使われる可能性は十分にあるんだから、いっそライブラリは外して全部ソースコードでいきたいね。
http://d.hatena.ne.jp/matarillo/20110430/p1
・Ｃ＃でサウンド再生・音楽再生する方法のまとめ。.wavならSoundPlayクラスを使えるが、mp3だとmciやDicrectXを使うしかないか。
http://www.geocities.co.jp/NatureLand/2023/reference/Multimedia/sound01.html#jmp01
